""" Abstract density estimator classes 
    abstract base class Densityestimator
    with derived abstract classes for discrete
    and continuous densitty estimates 

"""
import os
import numpy as np
import pandas as pd 

class DensityEstimator(object):
    """
    Abstract density estimator class

    density estimators should handle discrete or continuous real-valued data
    of one or multiple dimensions
    """

    def __init__(self, data, metadata=None):
        """
        perform checks on data type and determine dimensionaality of data

        :param data: data to estimate density for in form of ndarray, pandas DataFrame orr pandas Series
        :param metadata: optional; descriptive metadata for data column(s)
        """  		
        self._data = data 
        self._metadata = metadata
        #self._dim = None

        self._check_data_type()
        #_get_dimensionality()

    def _check_data_type(self):
        """
        check whether type of data object is supported
        """
        if not (isinstance(self._data, np.ndarray) or isinstance(self._data,pd.DataFrame) or isinstance(self._data,pd.Series)):
            raise TypeError(
                'data of type %s not supported' )% (type(self._data))
    
    def obtain_density(self):
        raise NotImplementedError(
            "Class %s doesn't implement obtain_density()"% self.__class__.__name__)


class DiscreteDensityEstimator(DensityEstimator):
    """
    Abstract density estimator class for discrete or discretized data

    discrete density estimators should handle dicrete or continuous real-valued data
    (in the latter case a discretization should be supplied) of one or multiple dimensions.

    discrete density estimators should return density estimates as key value pairs
    """

    def __init__(self, data, metadata=None):
        """
        Initialize density Discrete density estiamtor 

        :param data: data for which density i to be estimated
        :param metadata: optional; metadata describing data for density estimation 
        """
        super().__init__(data,metadata=metadata)
        self._discrete_pdf = None

    def _check_discretization_info(self, discrete=True, discretization=None):
        """
        check whether data is discrete and whether a discretization scheme has been provided

        :param discrete: keyword indicating whether data is inherently discrete
        :param discretization: discretization scheme for continuous data. should be of the form
        of discretizatuions generated by ssupported discretizers
        """
        if discrete:
            if discretization == None:
                self._set_class_discretization_info(discrete,discretization)
            else:
                raise RuntimeError(
                    'discretization schemes for intrinsically discrete data are not supported')
        else:
            if discretization is not None:
                self._set_class_discretization_info(discrete,discretization)
            else:
                raise RuntimeError(
                    'Estimation of discrete densities for non-discrete data requires a user supplied discretization')

    def _set_class_discretization_info(self, discrete, discretization):
        """
        set object attibutes discrete and discretization

        :param discrete: keyword indicating whether data is inherently discrete
        :param discretization: discretization scheme for continuous data. should be of the form
                               of discretizations generated by supported discretizers
        """
        self._discrete = discrete
        self._discretization = discretization

    def obtain_density(self):
        """
        return density estimate. This method is implemented in the specific subclass
        """
        raise NotImplementedError(
            "Class %s doesn't implement obtain_density()"% self.__class__.__name__)

class ContinuousDensityEstimator(DensityEstimator):
    """
    Abstract class for continuous density estimatates on continuous 
    data sets

    continuous density estimators should handle continuous real-valued data
    of one or multiple dimensions.

    continuous density estimators should return a function
    """

